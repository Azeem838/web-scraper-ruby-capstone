exit
test.scrap_nytimes.respond_to?(:css)
test.scrap_nytimes.respond_to(:css)
test.scrap_nytimes.class
test.scrap_nytimes
test = ScrapNYT.new
test - ScrapNYT.new
exit
good_reads.reset_browser.class
good_reads.reset_browser
exit
good_reads.html.class
good_reads.html
GReadsScraper.new(j, all_books, driver)
good_reads.html
exit
NYTPAGE_CONST.respond_to?(:each)
NYTPAGE_CONST.class
exit
BookData.new(0, NYTPAGE_CONST[0]).book_data_array
BookData.new(0, 0).book_data_array
book
exit
NYTPAGE_CONST.respond_to?(:each)
NYTPAGE_CONST.is_a?(Hash)
)
NYTPAGE_CONST.instance_of?
NYTPAGE_CONST.is_a? (Array)
NYTPAGE_CONST.is_a?
NYTPAGE_CONST.class
NYTPAGE_CONST.type
NYTPAGE_CONST[0]
NYTPAGE_CONST
exit
section.count
exit
driver.get('https://goodreads.com')
driver
exit
GReadsScraper.new.start_browser
j
all_books
driver
exit
rating.avg_rating
rating
exit
      good_reads = GReadsScraper.new(j, all_books)
        good_reads.scrap_goodreads.close
      rating = Ratings.new(good_reads.html)
      good_reads = GReadsScraper.new(j, all_books)
rating
good_reads
exit
browser.close
exit
        book.insert(5, rating.num_of_ratings)
        book.insert(4, rating.avg_rating)
exit
test1.num_of_ratings
test1.avg_rating
test1 = Ratings.new(test)
test = GReadsScraper.new(0, all_books).html
test = GReadsScraper.html
rating
rating.avg_rating
html.at_css('span.minirating').text.split[0].to_f
html
html.at_css('span.minirating').text.split[0].to_f
    @html.at_css('span.minirating').text.split[0].to_f
        book.insert(4, rating.avg_rating)
exit
avg_rating
        book.insert(4, avg_rating)
rating.num_of_ratings
avg_rating
html.at_css('span.minirating').text.split[4].gsub(/,/, '').to_i
html.at_css('span.minirating').text.split[0].to_f
rating
html
exit
continue
exit
rating
exit
rating
exit
BookData.new(1, section).section_name
BookData.new(1, section).book_data_array
BookData.new(1, section).section_name
BookData.new(1, section).book_info
BookData.new(1, section).link
BookData.new(1, section).description
BookData.new(1, section).time
BookData.new(1, section).author
BookData.new(1, section).title
BookData.new(1, section).book_data_array
BookData.new(1, section)
section = sections[0]
sections
clear
book
exit
book
exit
BookData.new
book
exit
num_of_ratings = doc.at_css('span.minirating').text.split[4].gsub(/,/, '').to_i
avg_rating = doc.at_css('span.minirating').text.split[0].to_f
doc = Nokogiri::HTML.parse(browser.html)
browser.send_keys :enter
browser.text_field(id: 'sitesearch_field').set "HARRY POTTER"
exit
doc.at_css('span.minirating').text.split[4].gsub(/,/ ,"").to_i
doc.at_css('span.minirating').text.split[4].gsub(,/ ,"").to_i
doc.at_css('span.minirating').text.split[4].gsub(/,,"").to_i
doc.at_css('span.minirating').text.split[4].gsub(/,/ ,"").to_i
doc.at_css('span.minirating').text.split[4].gsub(/[\,]/ ,"").to_i
doc.at_css('span.minirating').text.split[4].gsub(/[\s,]/ ,"").to_i
doc.at_css('span.minirating').text.split[4].gsub(/[\s,]/ ,"")
doc.at_css('span.minirating').text.split[4]
doc.at_css('span.minirating').text.split[4].split
doc.at_css('span.minirating').text.split[4]
doc.at_css('span.minirating').text.split[4].to_i
doc.at_css('span.minirating').text.split[4].to_f
doc.at_css('span.minirating').text.split
rating
exit
books.count
exit
books[0][1]
book[0][1]
books
exit
book_wrapper[i].at_css('a.css-hndxeu').attributes["href"].value
book_wrapper[i].at_css('a.css-hndxeu').value
book_wrapper[i].at_css('a.css-hndxeu')
book_wrapper[i].css('p.css-5yxv3r').text
book_wrapper[i].css('p.css-5yxv3r').tex
exit
sections
exit
books_shown[i].at_css('a')
books_shown[i].css('a.css-hndxeu')
books_shown[i].at_css('a.css-hndxeu')
books_shown[i].at_css('li.css-hndxeu')
books_shown[i].at_css('li.css-hndxeu').text
books_shown
books.shown
exit
continue
section_name
continue
section_name
continue
section_name
continue
section_name
continue
section_name
continue
section_name
continue
section_name
continue
section_name
exit
continue
exit
books_shown.count
exit
books.last
books.first
books
exit
section_name
continue
section_name
book[:title]
continue
book[:title]
continue
book[:author]
book[:title]
continue
book[:title]
section_name
exit
book[:time]
book[:title]
book[:author]
exit
section_name
continue
book[:title]
books
book
continue
section_name
continue
book[author]
section_name
exit
first_section.css('a.css-nzgijy')
first_section = sections.first
sections
section_name
section_nam
exit
first_section = sections.first
sections.first
parsed_page.css('div.css-v2kl5d').first
parsed_page.css('div.css-v2kl5d').first.css('section.css-1efiz68')
parsed_page.css('div.css-v2kl5d').first
parsed_page.css('div.css-v2kl5d')
parsed_page.css('div.css-v2kl5d'')
sections.first.css('section.css-1efiz68')
sections.first
sections
exit
book[:title]
book[:author]
section_name
exit
books[:title]
book[:title]
book[:author]
section_name
exit
section_name
secton_name
exit
first_book.css('p.css-t7cods').text
first_book.css('a.css-g5yn3w').text
first_book.css('a.css-nzgijy').text
first_book.css('a.css-nzgijy')
first_book.css(a.css-nzgijy)
first_book = books.first
exit
first_book
first_book.css('section.css-1efiz68')
first_book.css('p.css-t7cods').text
first_book.css('p.css-t7cods')
first_book.css('p.css-t7cods').text
first_book.css('a.css-nzgijy')
first_book = books.first
books.first
exit
exi
book[:time]
]
book[:title]
book[:author]
exit
books = parsed_page.css('a.css-g5yn3w')exit
